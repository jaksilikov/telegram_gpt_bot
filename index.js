/**
 * Telegram GPT Bot
 * ----------------
 * Telegram –±–æ—Ç –Ω–∞ Node.js —Å GPT4Free (BlackBox),
 * –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω-–ø—Ä–æ–º—Ç–∞.
 * 
 * Author: Mukhtar Zhaksylykov
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const GPT4js = require('gpt4js');
const fs = require('fs');
const path = require('path');

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMINS = process.env.ADMINS ? process.env.ADMINS.split(',').map(id => parseInt(id)) : [];
const PROMPTS_FILE = path.join(__dirname, 'prompts.json');
const HISTORY_FILE = path.join(__dirname, 'history.json');
const HISTORY_LIMIT = 15; // —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
if (!BOT_TOKEN) {
    console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env");
    process.exit(1);
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤ ---
let prompts = JSON.parse(fs.readFileSync(PROMPTS_FILE, 'utf-8'));

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ ---
let chatHistories = {};
if (fs.existsSync(HISTORY_FILE)) {
    chatHistories = JSON.parse(fs.readFileSync(HISTORY_FILE, 'utf-8'));
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT4js ---
const options = {
    provider: "BlackBox",
    model: "BlackBox",
};
const provider = GPT4js.createProvider(options.provider);

// --- –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ ---
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// --- –§—É–Ω–∫—Ü–∏–∏ ---
function setAdminPrompt(newPrompt) {
    prompts.admin_prompt = newPrompt;
    fs.writeFileSync(PROMPTS_FILE, JSON.stringify(prompts, null, 2));
}

function addToHistory(chatId, role, content) {
    if (!chatHistories[chatId]) chatHistories[chatId] = [];
    chatHistories[chatId].push({ role, content });
    if (chatHistories[chatId].length > HISTORY_LIMIT) chatHistories[chatId].shift();
    fs.writeFileSync(HISTORY_FILE, JSON.stringify(chatHistories, null, 2));
}

function isAdmin(chatId) {
    return ADMINS.includes(chatId);
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // --- –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–º—Ç–∞ ---
    if (text.startsWith('/setprompt') && isAdmin(chatId)) {
        const newPrompt = text.replace('/setprompt', '').trim();
        if (!newPrompt) {
            bot.sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.");
            return;
        }
        setAdminPrompt(newPrompt);
        bot.sendMessage(chatId, "‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
        return;
    }

    // --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç ---
    const systemPrompt = prompts.admin_prompt || prompts.default;

    // --- –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é ---
    addToHistory(chatId, 'user', text);

    // --- –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT ---
    const messages = [
        { role: 'system', content: systemPrompt },
        ...chatHistories[chatId]
    ];

    try {
        bot.sendChatAction(chatId, 'typing');
        const response = await provider.chatCompletion(messages, options);

        // --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é ---
        addToHistory(chatId, 'assistant', response);

        bot.sendMessage(chatId, response);
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
    }
});

console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
